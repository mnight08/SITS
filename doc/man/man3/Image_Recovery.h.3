.TH "C:/cygwin64/home/ez pawn/Projects, simulation, and code/SITS/Image_Recovery/Image_Recovery.h" 3 "Mon May 1 2017" "Version .001" "Sythetic Aperture Radar Image Testing Suite" \" -*- nroff -*-
.ad l
.nh
.SH NAME
C:/cygwin64/home/ez pawn/Projects, simulation, and code/SITS/Image_Recovery/Image_Recovery.h
.SH SYNOPSIS
.br
.PP
\fC#include <complex>\fP
.br
\fC#include <iostream>\fP
.br
\fC#include <string>\fP
.br
\fC#include <stdlib\&.h>\fP
.br
\fC#include <cstring>\fP
.br
\fC#include <fstream>\fP
.br
\fC#include <math\&.h>\fP
.br

.SS "Classes"

.in +1c
.ti -1c
.RI "class \fBImageRecovererNaive\fP"
.br
.ti -1c
.RI "class \fBImageRecovererButterfly\fP"
.br
.ti -1c
.RI "class \fBMath\fP"
.br
.ti -1c
.RI "class \fBChebyshevGrid\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "const complex< double > \fBi\fP (0, 1)"
.br
.ti -1c
.RI "double \fBphi\fP (\fBpoint\fP x, \fBpoint\fP y)"
.br
.ti -1c
.RI "class \fBChebyshevGrid\fP \fBBuild_Grids\fP (double *&grids, ostream &log)"
.br
.ti -1c
.RI "int \fBGrid_Index\fP (int Box, int t, int l, ostream &log)"
.br
.ti -1c
.RI "\fBpoint\fP \fBGrid_Point\fP (double *grids, int Box, int t1, int t2, int l, ostream &log)"
.br
.ti -1c
.RI "void \fBProto_Grid\fP (double *fillme, ostream &log)"
.br
.ti -1c
.RI "void \fBGrid\fP (double *grid, double *proto_grid, int Box, int l, ostream &log)"
.br
.ti -1c
.RI "void \fBSwap\fP (complex< double > *&current, complex< double > *&previous, ostream &log)"
.br
.ti -1c
.RI "void \fBZero\fP (complex< double > *weights, ostream &log)"
.br
.ti -1c
.RI "double \fBCenter1d\fP (int l, int box, ostream &log)"
.br
.ti -1c
.RI "\fBpoint\fP \fBCenter\fP (int l, int box, ostream &log)"
.br
.ti -1c
.RI "int \fBImage_Index\fP (int m, int n)"
.br
.ti -1c
.RI "int \fBData_Index\fP (int s, int w)"
.br
.ti -1c
.RI "double \fBX\fP (int m)"
.br
.ti -1c
.RI "double \fBY\fP (int n)"
.br
.ti -1c
.RI "double \fBGamma_D_X\fP (double sl)"
.br
.ti -1c
.RI "double \fBGamma_D_Y\fP (double sl)"
.br
.ti -1c
.RI "double \fBW\fP (int w)"
.br
.ti -1c
.RI "double \fBQ\fP (int e)"
.br
.ti -1c
.RI "double \fBS\fP (int s)"
.br
.ti -1c
.RI "void \fBZero_Grids\fP (double *grids)"
.br
.ti -1c
.RI "void \fBImage_Recovery_Butterfly\fP (double *&recovered_reflectivity, complex< double > *data, ostream &log)"
.br
.ti -1c
.RI "void \fBImage_Recovery_Direct\fP (double *recovered_reflectivity, complex< double > *data, ostream &log)"
.br
.ti -1c
.RI "void \fBOutput_Reflectivity\fP (double *reflectivity, string file)"
.br
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "const double \fBpi\fP =3\&.14159265359"
.br
.ti -1c
.RI "const double \fBc_0\fP =299792458"
.br
.ti -1c
.RI "const int \fBN\fP =4"
.br
.ti -1c
.RI "const int \fBM\fP =\fBN\fP*\fBN\fP"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "class \fBChebyshevGrid\fP Build_Grids (double *& grids, ostream & log)"

.PP
Definition at line 184 of file Image_Recovery\&.h\&.
.SS "\fBpoint\fP Center (int l, int box, ostream & log)\fC [inline]\fP"

.PP
Definition at line 222 of file Image_Recovery\&.h\&.
.SS "double Center1d (int l, int box, ostream & log)\fC [inline]\fP"

.PP
Definition at line 217 of file Image_Recovery\&.h\&.
.SS "int Data_Index (int s, int w)\fC [inline]\fP"

.PP
Definition at line 231 of file Image_Recovery\&.h\&.
.SS "double Gamma_D_X (double sl)\fC [inline]\fP"

.PP
Definition at line 240 of file Image_Recovery\&.h\&.
.SS "double Gamma_D_Y (double sl)\fC [inline]\fP"

.PP
Definition at line 244 of file Image_Recovery\&.h\&.
.SS "void Build_Grids::Grid (double * grid, double * proto_grid, int Box, int l, ostream & log)\fC [inline]\fP"

.PP
Definition at line 44 of file Image_Recovery\&.h\&.
.SS "int Build_Grids::Grid_Index (int Box, int t, int l, ostream & log)\fC [inline]\fP"

.PP
Definition at line 24 of file Image_Recovery\&.h\&.
.SS "\fBpoint\fP Build_Grids::Grid_Point (double * grids, int Box, int t1, int t2, int l, ostream & log)\fC [inline]\fP"

.PP
Definition at line 28 of file Image_Recovery\&.h\&.
.SS "const complex<double> i (0, 1)"

.SS "int Image_Index (int m, int n)\fC [inline]\fP"

.PP
Definition at line 228 of file Image_Recovery\&.h\&.
.SS "void Image_Recovery_Butterfly (double *& recovered_reflectivity, complex< double > * data, ostream & log)"

.PP
Definition at line 271 of file Image_Recovery\&.h\&.
.SS "void Image_Recovery_Direct (double * recovered_reflectivity, complex< double > * data, ostream & log)"

.PP
Definition at line 436 of file Image_Recovery\&.h\&.
.SS "void Output_Reflectivity (double * reflectivity, string file)"

.PP
Definition at line 469 of file Image_Recovery\&.h\&.
.SS "double phi (\fBpoint\fP x, \fBpoint\fP y)"

.PP
Definition at line 21 of file Image_Recovery\&.h\&.
.SS "void Build_Grids::Proto_Grid (double * fillme, ostream & log)\fC [inline]\fP"

.PP
Definition at line 36 of file Image_Recovery\&.h\&.
.SS "double Q (int e)\fC [inline]\fP"

.PP
Definition at line 252 of file Image_Recovery\&.h\&.
.SS "double S (int s)\fC [inline]\fP"

.PP
Definition at line 255 of file Image_Recovery\&.h\&.
.SS "void Swap (complex< double > *& current, complex< double > *& previous, ostream & log)\fC [inline]\fP"

.PP
Definition at line 205 of file Image_Recovery\&.h\&.
.SS "double W (int w)\fC [inline]\fP"

.PP
Definition at line 248 of file Image_Recovery\&.h\&.
.SS "double X (int m)\fC [inline]\fP"

.PP
Definition at line 234 of file Image_Recovery\&.h\&.
.SS "double Y (int n)\fC [inline]\fP"

.PP
Definition at line 237 of file Image_Recovery\&.h\&.
.SS "void Zero (complex< double > * weights, ostream & log)\fC [inline]\fP"

.PP
Definition at line 212 of file Image_Recovery\&.h\&.
.SS "void Zero_Grids (double * grids)\fC [inline]\fP"

.PP
Definition at line 259 of file Image_Recovery\&.h\&.
.SH "Variable Documentation"
.PP 
.SS "const double c_0 =299792458"

.PP
Definition at line 11 of file Image_Recovery\&.h\&.
.SS "const int M =\fBN\fP*\fBN\fP"

.PP
Definition at line 15 of file Image_Recovery\&.h\&.
.SS "const int N =4"

.PP
Definition at line 14 of file Image_Recovery\&.h\&.
.SS "const double pi =3\&.14159265359"

.PP
Definition at line 10 of file Image_Recovery\&.h\&.
.SH "Author"
.PP 
Generated automatically by Doxygen for Sythetic Aperture Radar Image Testing Suite from the source code\&.
